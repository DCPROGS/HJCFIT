#ifndef DCPROGS_CONFIG_H
#define DCPROGS_CONFIG_H

#include <iso646.h>
#include <Eigen/Dense>

#cmakedefine HAS_CXX11_TYPETRAITS
#cmakedefine HAS_CXX11_TRIVIALTYPETRAITS
#cmakedefine noexcept throw()
#cmakedefine MSWINDOBE __declspec(dllimport)
#cmakedefine HAS_CXX11_CONSTEXPR

#ifdef HAS_CXX11_CONSTEXPR
# define DCPROGS_INIT_CONSTEXPR(TYPEANDNAME, VALUE) constexpr static TYPEANDNAME = VALUE
# define DCPROGS_DECL_CONSTEXPR(TYPEANDNAME, VALUE) constexpr TYPEANDNAME
#else 
# define DCPROGS_INIT_CONSTEXPR(TYPEANDNAME, VALUE) const static TYPEANDNAME
# define DCPROGS_DECL_CONSTEXPR(TYPEANDNAME, VALUE) const TYPEANDNAME = VALUE
#endif

#if defined(MSWINDOBE) && defined(DCPROGS_LIKELIHOOD_DLLEXPORT)
# undef MSWINDOBE
# define MSWINDOBE __declspec(dllexport)
#endif
#ifndef MSWINDOBE 
# define MSWINDOBE
#endif

#cmakedefine DCPROGS_PYTHON_BINDINGS
#cmakedefine DCPROGS_NPY_LONG_DOUBLE
#cmakedefine DCPROGS_NPY_BOOL
#cmakedefine DCPROGS_NPY_ARRAY
#cmakedefine DCPROGS_NPY_ENABLEFLAGS
#cmakedefine NUMPY_VERSION_MAJOR @NUMPY_VERSION_MAJOR@
#cmakedefine NUMPY_VERSION_MINOR @NUMPY_VERSION_MINOR@


namespace DCProgs {
  //! Types of reals across DCProgs.
  typedef double t_real;
  //! Complex real type
  typedef std::complex<t_real> t_complex;
  //! Types of integers across DCProgs.
  typedef int t_int;
  //! Types of real matrices across DCProgs.
  typedef Eigen::Matrix<t_real, ::Eigen::Dynamic, ::Eigen::Dynamic> t_rmatrix;
  //! Types of initial state vectors across DCProgs.
  typedef Eigen::Matrix<t_real, 1, ::Eigen::Dynamic> t_initvec;
  //! Types of final state vectors across DCProgs.
  typedef Eigen::Matrix<t_real, ::Eigen::Dynamic, 1> t_finivec;
  //! Type for a vector. 
  typedef t_finivec t_rvector;
  //! Type of complex matrices.
  typedef Eigen::Matrix<t_complex, ::Eigen::Dynamic, ::Eigen::Dynamic> t_cmatrix;
  //! Type of complex vectors.
  typedef Eigen::Matrix<t_complex, ::Eigen::Dynamic, 1> t_cvector;
}
#endif
